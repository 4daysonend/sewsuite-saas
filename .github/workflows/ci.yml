name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_BACKEND_REPOSITORY: sewsuite-backend-production
  ECR_FRONTEND_REPOSITORY: sewsuite-frontend-production

jobs:
  # =============================================
  # SECURITY & QUALITY CHECKS
  # =============================================
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Secret Scanning
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # Dependency Vulnerability Scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # SAST (Static Application Security Testing)
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Code Quality
      - name: ESLint Backend
        run: |
          cd backend
          npm ci
          npm run lint

      - name: ESLint Frontend
        run: |
          cd frontend
          npm ci
          npm run lint

      # License Compliance
      - name: License Check
        run: |
          cd backend && npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'
          cd ../frontend && npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'

  # =============================================
  # AUTOMATED TESTING
  # =============================================
  test:
    name: Automated Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Backend Tests
      - name: Backend Unit Tests
        run: |
          cd backend
          npm ci
          npm run test:unit
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Backend Integration Tests
        run: |
          cd backend
          npm run test:integration
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      # Frontend Tests
      - name: Frontend Unit Tests
        run: |
          cd frontend
          npm ci
          npm run test:unit

      - name: Frontend E2E Tests
        run: |
          cd frontend
          npm run build
          npm run test:e2e
        env:
          API_URL: http://localhost:3000

      # Test Coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
          fail_ci_if_error: true

  # =============================================
  # INFRASTRUCTURE VALIDATION
  # =============================================
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Security Scan (Checkov)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif

      - name: Upload Terraform Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: reports/results.sarif

  # =============================================
  # BUILD & SECURITY SCAN IMAGES
  # =============================================
  build-and-scan:
    name: Build & Scan Container Images
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Backend Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG ./backend
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Build Frontend Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG ./frontend
          docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest ./frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

      # Container Security Scanning
      - name: Scan Backend Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Scan Frontend Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: '.'

      # Image Signing (Cosign)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign Backend Image
        run: |
          cosign sign --yes $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Sign Frontend Image
        run: |
          cosign sign --yes $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

      # Push Images
      - name: Push Backend Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Push Frontend Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

  # =============================================
  # STAGING DEPLOYMENT
  # =============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service \
            --cluster sewsuite-cluster-staging \
            --service sewsuite-backend-staging \
            --task-definition sewsuite-backend-staging \
            --force-new-deployment

          aws ecs update-service \
            --cluster sewsuite-cluster-staging \
            --service sewsuite-frontend-staging \
            --task-definition sewsuite-frontend-staging \
            --force-new-deployment

      - name: Wait for Staging Deployment
        run: |
          aws ecs wait services-stable \
            --cluster sewsuite-cluster-staging \
            --services sewsuite-backend-staging sewsuite-frontend-staging

      # Automated Testing on Staging
      - name: Run Smoke Tests on Staging
        run: |
          chmod +x ./scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh https://staging-api.sewsuite.co

      # DAST (Dynamic Application Security Testing)
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline-scan@v0.12.0
        with:
          target: 'https://staging-app.sewsuite.co'

  # =============================================
  # PRODUCTION DEPLOYMENT
  # =============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Blue-Green Deployment Strategy
      - name: Deploy with Blue-Green Strategy
        run: |
          chmod +x ./scripts/blue-green-deploy.sh
          ./scripts/blue-green-deploy.sh

      # Post-deployment Verification
      - name: Run Production Health Checks
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh https://api.sewsuite.co

      # Performance Testing
      - name: Run Performance Tests
        run: |
          chmod +x ./scripts/performance-test.sh
          ./scripts/performance-test.sh https://app.sewsuite.co

      # Rollback on Failure
      - name: Rollback on Failure
        if: failure()
        run: |
          chmod +x ./scripts/rollback.sh
          ./scripts/rollback.sh

  # =============================================
  # NOTIFICATIONS
  # =============================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}