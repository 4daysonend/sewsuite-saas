version: '3.8'

services:
  # Database services with enhanced security
  postgres:
    image: postgres:14-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add init scripts for hardening
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - sewsuite-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    # Remove port mapping - not exposed to host

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sewsuite-network
    secrets:
      - redis_password
    # No port mapping - not exposed to host
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # MinIO with improved security
  minio:
    image: minio/minio
    restart: always
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER_FILE: /run/secrets/minio_root_user
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password
    volumes:
      - minio_data:/data
    networks:
      - sewsuite-network
    secrets:
      - minio_root_user
      - minio_root_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Vault service with proper security
  vault:
    image: hashicorp/vault:latest
    restart: always
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
    volumes:
      - ./vault/config:/vault/config:ro
      - vault_data:/vault/data
    command: server -config=/vault/config/vault.hcl
    networks:
      - sewsuite-network
    # Health check for Vault
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.rule=Host(`vault.sewsuite.co`)"
      - "traefik.http.routers.vault.entrypoints=websecure"
      - "traefik.http.routers.vault.tls.certresolver=myresolver"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"

  # Vault agent sidecar
  vault-agent:
    image: hashicorp/vault:latest
    restart: always
    command: agent -config=/vault/config/agent.hcl
    volumes:
      - ./vault/config:/vault/config:ro
      - vault_token:/vault/token  # Shared volume with backend
    environment:
      VAULT_ADDR: http://vault:8200
    env_file:
      - ./vault/config/agent.env  # Contains VAULT_ROLE_ID and VAULT_SECRET_ID
    depends_on:
      - vault
    networks:
      - sewsuite-network

  # Backend API Service with improved security
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: ${PORT}
      VAULT_ADDR: http://vault:8200
    volumes:
      - ./logs:/app/logs:rw
      - vault_token:/vault/token:ro  # Read-only mount
    networks:
      - sewsuite-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_healthy
      vault:
        condition: service_started
      vault-agent:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.sewsuite.co`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=${PORT}"
      # Add security headers
      - "traefik.http.middlewares.secureheaders.headers.browserXssFilter=true"
      - "traefik.http.middlewares.secureheaders.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secureheaders.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.secureheaders.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.secureheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secureheaders.headers.stsPreload=true"
      - "traefik.http.routers.backend.middlewares=secureheaders"

  # Frontend with production build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      - API_URL=https://api.sewsuite.co
      - NODE_ENV=production
    networks:
      - sewsuite-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`sewsuite.co`,`www.sewsuite.co`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3001"
      # Add security headers
      - "traefik.http.middlewares.secureheaders.headers.browserXssFilter=true"
      - "traefik.http.middlewares.secureheaders.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secureheaders.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.secureheaders.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.secureheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secureheaders.headers.stsPreload=true"
      - "traefik.http.routers.frontend.middlewares=secureheaders"

  # Reverse proxy and SSL with Traefik - improved security
  traefik:
    image: traefik:v2.10
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro"
      # Additional dynamic configuration
      - "./traefik/config:/etc/traefik/config:ro"
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/config"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # Security enhancements
      - "--accesslog=true"
      - "--accesslog.filePath=/var/log/traefik/access.log"
      - "--accesslog.format=json"
      - "--log.level=INFO"
    networks:
      - sewsuite-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.sewsuite.co`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USERS}"

networks:
  sewsuite-network:
    driver: bridge
    # Additional network security
    driver_opts:
      encrypted: "true"

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  vault_data:
  vault_token:

# Define secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  minio_root_user:
    file: ./secrets/minio_root_user.txt
  minio_root_password:
    file: ./secrets/minio_root_password.txt